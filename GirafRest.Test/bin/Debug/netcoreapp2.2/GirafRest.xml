<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GirafRest</name>
    </assembly>
    <members>
        <member name="M:GirafRest.Controllers.AccountController.Login(GirafRest.Models.DTOs.AccountDTOs.LoginDTO)">
            <summary>
            This endpoint allows the user to sign in to his/her account by providing valid username and password.
            </summary>
            <param name="model">A <see cref="T:GirafRest.Models.DTOs.AccountDTOs.LoginDTO"/> i.e. a json object with username and password</param>
            <returns>
            JwtToken if credentials are valid else Errorcode: MissingProperties or InvalidCredentials
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.AccountController.Register(GirafRest.Models.DTOs.AccountDTOs.RegisterDTO)">
            <summary>
            Register a new user in the REST-API
            </summary>
            <param name="model">A reference to a <see cref="T:GirafRest.Models.DTOs.AccountDTOs.RegisterDTO"/> i.e. a json string containing;
            Username, Password, DisplayName, departmentId and Role.</param>
            <returns>
            Response with a GirafUserDTO for the registered user One of the following Error codes:
             Missingproperties, InvalidCredentials, RoleNotFound, NotAuthorised, UserAlreadyExist, DepartmentNotFound,
             Error
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.AccountController.ChangePasswordByOldPassword(System.String,GirafRest.Models.DTOs.AccountDTOs.ChangePasswordDTO)">
            <summary>
            Allows the user to change his password if they know their old password.
            </summary>
            <param name="model">A reference to <see cref="T:GirafRest.Models.DTOs.AccountDTOs.ChangePasswordDTO"/></param>
            <returns>
            Empty Response on success. Else: Missingproperties, PasswordNotUpdated or UserNotFound
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.AccountController.ChangePasswordByToken(System.String,GirafRest.Models.DTOs.AccountDTOs.ResetPasswordDTO)">
            <summary>
            Allows a user to set a new password if they forgot theirs.
            </summary>
            <param name="model">All information needed to set the password in a ResetPasswordDTO, i.e. password and reset token.</param>
            <returns>
            Empty Response on success. 
            UserNotFound if invalid user id was suplied
            MissingProperties if there was missing properties
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.AccountController.GetPasswordResetToken(System.String)">
            <summary>
            Allows the user to get a password reset token for a given user
            </summary>
            <returns>
            Return the password reset token on success. 
            UserNotFound if invalid user id was suplied
            NotAuthorized if the  currently logged in user is not allowed to change the given users password
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GirafRest.Controllers.AccountController.DeleteUser(System.String)" -->
        <member name="M:GirafRest.Controllers.AccountController.GetRoleClaims(GirafRest.Models.GirafUser)">
            <summary>
            Gets roles s.t we can get role from payload 
            </summary>
            <param name="user"><see cref="T:GirafRest.Models.GirafUser"/> to get claims for</param>
            <returns>The role claims for the given user</returns>
        </member>
        <member name="M:GirafRest.Controllers.AccountController.GenerateJwtToken(GirafRest.Models.GirafUser,System.String)">
            <summary>
            Generates a JSON Web Token Token (JwtToken) for a given user and role. Based on the method with the same name from https://github.com/jatarga/WebApiJwt/blob/master/Controllers/AccountController.cs
            </summary>
            <param name="user">Which <see cref="T:GirafRest.Models.GirafUser"/> to generate the token for</param>
            <returns>
            JWT Token as a string
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.AccountController.GirafRoleFromEnumToString(GirafRest.Models.DTOs.GirafRoles)">
            <summary>
            Simple helper method for converting a role as enum to a role as string
            </summary>
            <returns>The role as a string</returns>
            <param name="role">A given role as enum that should be converted to a string</param>
        </member>
        <member name="M:GirafRest.Controllers.ActivityController.PostActivity(GirafRest.Models.DTOs.ActivityDTO,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new activity to a given weekplan on the given day.
            </summary>
            <param name="newActivity">a serialized version of the new activity.</param>
            <param name="userId">id of the user that you want to add the activity for.</param>
            <param name="weekplanName">name of the weekplan that you want to add the activity on.</param>
            <param name="weekYear">year of the weekplan that you want to add the activity on.</param>
            <param name="weekNumber">week number of the weekplan that you want to add the activity on.</param>
            <param name="weekDayNmb">day of the week that you want to add the activity on (Monday=1, Sunday=7).</param>
            <returns>Returns <see cref="T:GirafRest.Models.DTOs.ActivityDTO"/> for the requested activity on success else MissingProperties, 
            UserNotFound, NotAuthorized, WeekNotFound or InvalidDay.</returns>
        </member>
        <member name="M:GirafRest.Controllers.ActivityController.DeleteActivity(System.String,System.Int64)">
            <summary>
            Delete an activity with a given id.
            </summary>
            <param name="userId">id of the user you want to delete an activity for.</param>
            <param name="activityId">id of the activity you want to delete.</param>
            <returns>Returns success response else UserNotFound, NotAuthorized or ActivityNotFound.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GirafRest.Controllers.ActivityController.UpdateActivity(GirafRest.Models.DTOs.ActivityDTO,System.String)" -->
        <member name="M:GirafRest.Controllers.DepartmentController.Get">
            <summary>
            Get request for getting all the department names.
            </summary>
            <returns>A list of department names, returns NotFound if no departments in the system</returns>
        </member>
        <member name="M:GirafRest.Controllers.DepartmentController.Get(System.Int64)">
            <summary>
            Get the department with the specified id.
            </summary>
            <param name="id">The id of the <see cref="T:GirafRest.Models.Department"/> to retrieve.</param>
            <returns>The department as a DepartmentDTO if success else UserNotfound, NotAuthorised or NotFound</returns>
        </member>
        <member name="M:GirafRest.Controllers.DepartmentController.GetCitizenNamesAsync(System.Int64)">
            <summary>
            Gets the citizen names.
            </summary>
            <returns>The citizen names else DepartmentNotFound, NotAuthorised or DepartmentHasNoCitizens</returns>
            <param name="id">Id of <see cref="T:GirafRest.Models.Department"/> to get citizens for</param>
        </member>
        <member name="M:GirafRest.Controllers.DepartmentController.Post(GirafRest.Models.DTOs.DepartmentDTO)">
            <summary>
            Create a new department. it's only necesary to supply the departments name
            </summary>
            <param name="depDTO">The <see cref="T:GirafRest.Models.DTOs.DepartmentDTO"/> to create
            </param>
            <returns>The new departmentDTO with all database-generated information if success 
            else: MissingProperties, UserNotFound, NotAuthorised, InvalidProperties or CouldNotCreateDepartmentUser
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.DepartmentController.AddUser(System.Int64,System.String)">
            <summary>
            Add a user that does not have a department to the given department.
            Requires role Department, Guardian or SuperUser
            </summary>
            <param name="departmentId">Identifier for the <see cref="T:GirafRest.Models.Department"/>to add user to</param>
            <param name="userId">The ID of a <see cref="T:GirafRest.Models.GirafUser"/> to be added to the department.</param>
            <returns>Else: MissingProperties, UserNotFound, NotAuthorised, DepartmentUserNotFound, 
            UserNameAlreadyTakenWithinDepartment, UserAlreadyHasDepartment, or Forbidden </returns>
        </member>
        <member name="M:GirafRest.Controllers.DepartmentController.AddResource(System.Int64,System.Int64)">
            <summary>
            Add a resource to the given department. After this call, the department owns the resource and it is available to all its members.
            </summary>
            <param name="departmentId">Id of the <see cref="T:GirafRest.Models.Department"/> to add the resource to.</param>
            <param name="resourceId">Id of the <see cref="T:GirafRest.Models.Pictogram"/> to add to the department.</param>
            <returns> The DepartmentDTO represented the updated state of the department if there were no errors.
            Else: DepartmentNotFound, ResourceNotFound, NotAuthorized or DepartmentAlreadyOwnsResourc
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.DepartmentController.DeleteDepartment(System.Int64)">
            <summary>
            Endpoint for deleting the <see cref="T:GirafRest.Models.Department"/> with the given id
            </summary>
            <returns>Empty response on success else: NotAuthorised or DepartmentNotFound</returns>
            <param name="departmentId">Identifier of <see cref="T:GirafRest.Models.Department"/> to delete</param>
        </member>
        <member name="M:GirafRest.Controllers.DepartmentController.RemoveResource(System.Int64)">
            <summary>
            Removes a resource from the users department.
            </summary>
            <param name="resourceId">identifier of <see cref="T:GirafRest.Models.Pictogram"/></param>
            <returns> <see cref="T:GirafRest.Models.DTOs.DepartmentDTO"/> of updated state if no problems occured.
            Else: ResourceNotFound, NotAuthorized or ResourceNotOwnedByDepartment
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.ErrorController.Index">
            <summary>
            All Error requests will redirect to this endpoint
            </summary>
            <returns>ErrorCode.NotFound</returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.ReadPictograms(System.String,System.Int32,System.Int32)">
            <summary>
            Get all public <see cref="T:GirafRest.Models.Pictogram"/> pictograms available to the user
            (i.e the public pictograms and those owned by the user (PRIVATE) and his department (PROTECTED)).
            </summary>
            <param name="query">The query string. pictograms are filtered based on this string if passed</param>
            <param name="page">Page number</param>
            <param name="pageSize">Number of pictograms per page</param>
            <returns> All the user's <see cref="T:GirafRest.Models.Pictogram"/> pictograms on success else InvalidProperties or 
            PictogramNotFound </returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.ReadPictogram(System.Int64)">
            <summary>
            Read the <see cref="T:GirafRest.Models.Pictogram"/> pictogram with the specified <paramref name="id"/> id and
            check if the user is authorized to see it.
            </summary>
            <param name="id">The id of the pictogram to fetch.</param>
            <returns> The <see cref="T:GirafRest.Models.Pictogram"/> pictogram with the specified ID,
            NotFound  if no such <see cref="T:GirafRest.Models.Pictogram"/> pictogram exists
            Else: PictogramNotFound, UserNotFound, Error, or NotAuthorized
            </returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.CreatePictogram(GirafRest.Models.DTOs.PictogramDTO)">
            <summary>
            Create a new <see cref="T:GirafRest.Models.Pictogram"/> pictogram.
            </summary>
            <param name="pictogram">A <see cref="T:GirafRest.Models.DTOs.PictogramDTO"/> with all relevant information about the new pictogram.</param>
            <returns>The new pictogram with all database-generated information.
            Else: Notfound, MissingProperties or InvalidProperties </returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.UpdatePictogramInfo(System.Int64,GirafRest.Models.DTOs.PictogramDTO)">
            <summary>
            Update info of a <see cref="T:GirafRest.Models.Pictogram"/> pictogram.
            </summary>
            <param name="pictogram">A <see cref="T:GirafRest.Models.DTOs.PictogramDTO"/> with all new information to update with.
            The Id found in this DTO is the target pictogram.
            </param>
            <returns> The updated Pictogram else: MissingProperties, InvalidProperties, NotFound, PictogramNotFound, or
            NotAuthorized </returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.DeletePictogram(System.Int32)">
            <summary>
            Delete the <see cref="T:GirafRest.Models.Pictogram"/> pictogram with the specified id.
            </summary>
            <param name="id">The id of the pictogram to delete.</param>
            <returns>Ok if the pictogram was deleted,
            Else: UserNotFound,PictogramNotFound or NotAuthorized </returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.SetPictogramImage(System.Int64)">
            <summary>
            Update the image of a <see cref="T:GirafRest.Models.Pictogram"/> pictogram with the given Id.
            </summary>
            <param name="id">Id of the pictogram to update the image for.</param>
            <returns>The updated pictogram along with its image.
            Else: UserNotFound, PictogramNotFound or NotAuthorized</returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.ReadPictogramImage(System.Int64)">
            <summary>
            Read the image of a given pictogram as a sequence of bytes.
            </summary>
            <param name="id">The id of the pictogram to read the image of.</param>
            <returns>A The image else: PictogramNotFound, NotAuthorized, PictogramHasNoImage, 
            or NotAuthorized </returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.ReadRawPictogramImage(System.Int64)">
            <summary>
            Reads the raw pictogram image.
            You are allowed to read all public pictograms aswell as your own pictograms
             or any pictograms shared within the department
            </summary>
            <returns>The raw pictogram image.</returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.CheckOwnership(GirafRest.Models.Pictogram,GirafRest.Models.GirafUser)">
            <summary>
            Checks if the user has some form of ownership of the pictogram.
            </summary>
            <param name="picto">The Pictogram in need of checking.</param>
            <param name="usr">The user in question.</param>
            <returns>A bool indicating whether the user owns the pictogram or not.</returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.ReadAllPictograms">
            <summary>
            Read all pictograms available to the current user (or only the PUBLIC ones if no user is authorized).
            </summary>
            <returns>A list of said pictograms.</returns>
        </member>
        <member name="M:GirafRest.Controllers.PictogramController.IbsenDistance(System.String,System.String)">
            <summary>
            The wagner-fisher implementation of the levenshtein distance named funny by my peers (long story)
            </summary>
            <returns>The edit distance between the strings a and b.</returns>
            <param name="a">Search string.</param>
            <param name="b">string to be compared against the search string</param>
        </member>
        <member name="M:GirafRest.Controllers.StatusController.Status">
            <summary>
            End-point for checking if the API is running
            </summary>
            <returns>Success Reponse.</returns>
        </member>
        <member name="M:GirafRest.Controllers.StatusController.DatabaseStatus">
            <summary>
            End-point for checking connection to the database
            </summary>
            <returns>Success response if connection to database else ErrorResponse</returns>
        </member>
        <member name="M:GirafRest.Controllers.StatusController.GetVersionInfo">
            <summary>
            Endpoint for getting git version info i.e. branch and commithash 
            </summary>
            <returns>branch and commit hash for this API instance</returns>
        </member>
        <member name="M:GirafRest.Controllers.UserController.GetUser">
            <summary>
            Find information about the currently authenticated user.
            </summary>
            <param name="id">Identifier of a <see cref="T:GirafRest.Models.GirafUser"/></param>
            <returns> If success returns Meta-data about the currently authorized user else UserNotFound /</returns>
        </member>
        <member name="M:GirafRest.Controllers.UserController.GetUser(System.String)">
            <summary>
            Find information on the user with the username supplied as a url query parameter or the current user.
            </summary>
            <returns>  Data about the user if success else MissingProperties, UserNotFound or NotAuthorized </returns>
        </member>
        <member name="M:GirafRest.Controllers.UserController.GetSettings(System.String)">
            <summary>
            Get user-settings for the user with the specified Id
            </summary>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to get settings for </param>
            <returns> UserSettings for the user if success else MissingProperties, UserNotFound or NotAuthorized </returns>
        </member>
        <member name="M:GirafRest.Controllers.UserController.UpdateUser(System.String,GirafRest.Models.DTOs.GirafUserDTO)">
            <summary>
            Updates the user with the information in <see cref="T:GirafRest.Models.DTOs.GirafUserDTO"/>
            </summary>
            <param name="id">identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to be updated</param>
            <param name="newUser">ref to <see cref="T:GirafRest.Models.DTOs.GirafUserDTO"/></param>
            <returns>DTO for the updated user on success else MissingProperties, UserNotFound, NotAuthorized,
            or UserAlreadyExists</returns>
        </member>
        <member name="M:GirafRest.Controllers.UserController.GetUserIcon(System.String)">
            <summary>
            Endpoint for getting the UserIcon for a specific User
            </summary>
            <returns>The requested image as a <see cref="T:GirafRest.Models.DTOs.ImageDTO"/></returns>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/>to get UserIcon for</param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.GetRawUserIcon(System.String)">
            <summary>
            Gets the raw user icon for a given user
            </summary>
            <returns>The user icon as a png</returns>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to get icon for</param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.SetUserIcon(System.String)">
            <summary>
            Sets the user icon of the given user
            </summary>
            <returns>The success response on success else UserNotFound, NotAuthorized, or MissingProperties.</returns>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to set icon for</param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.DeleteUserIcon(System.String)">
            <summary>
            Deletes the user icon for a given user
            </summary>
            <returns>Success response on success else UserHasNoIcon or NotAuthorized </returns>
            <param name="id">Identifier.</param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.AddUserResource(System.String,GirafRest.Models.DTOs.ResourceIdDTO)">
            <summary>
            Add a ressource to another user that the currently authorised user already owns
            </summary>
            <returns>The user the resource was added to if success else MissingProperties, UserNotFound, NotAuthorized,
            ResourceNotfound, ResourceMustBePrivate, UserAlreadyOwnsResource</returns>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to add the ressource to</param>
            <param name="resourceIdDTO">reference to a  <see cref="T:GirafRest.Models.DTOs.ResourceIdDTO"/></param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.DeleteResource(System.String,GirafRest.Models.DTOs.ResourceIdDTO)">
            <summary>
            Deletes the resource of the user with the given Id
            </summary>
            <returns>The User the resource was added to on success else UserNotFound, ResourceNotFound, NotAuthorized,
            or UserDoesNotOwnResource</returns>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to delete the resource for</param>
            <param name="resourceIdDTO">Reference to <see cref="T:GirafRest.Models.DTOs.ResourceIdDTO"/></param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.GetCitizens(System.String)">
            <summary>
            Gets the citizens of the user with the provided id. The provided user must be a guardian
            </summary>
            <returns>List of <see cref="T:GirafRest.Models.DTOs.UserNameDTO"/> on success else MissingProperties, NotAuthorized, Forbidden,
            or UserNasNoCitizens</returns>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to get citizens for</param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.GetGuardians(System.String)">
            <summary>
            Gets the guardians for the specific citizen corresponding to the provided id.
            </summary>
            <returns>List of Guardians on success else InvalidProperties, NotAuthorized, Forbidden,
            or UserHasNoGuardians </returns>
            <param name="id">Identifier for the citizen to get guardians for</param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.AddGuardianCitizenRelationship(System.String,System.String)">
            <summary>
            Adds relation between the authenticated user (guardian) and an existing citizen.
            </summary>
            <param name="id">Guardian id</param>
            <param name="citizenId">Citizen id</param>
            <returns>Success Reponse on Success else UserNotFound, NotAuthorized, UserNotFound, MissingProperties,
            or forbidden </returns>
        </member>
        <member name="M:GirafRest.Controllers.UserController.UpdateUserSettings(System.String,GirafRest.Models.DTOs.SettingDTO)">
            <summary>
            Updates the user settings for the user with the provided id
            </summary>
            <returns>The updated user settings as a <see cref="T:GirafRest.Models.DTOs.SettingDTO"/> on success else UserNotFound,
            MissingSettings, NotAuthorized, MissingProperties, InvalidProperties, ColorMustHaveUniqueDay, 
            IvalidDay, or InvalidHexValues</returns>
            <param name="id">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to update settings for</param>
            <param name="options">reference to a <see cref="T:GirafRest.Models.DTOs.SettingDTO"/> containing the new settings</param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.ValidateOptions(GirafRest.Models.DTOs.SettingDTO)">
            <summary>
            Check that enum values for settings is defined
            </summary>
            <returns>ErrorCode if any settings is invalid else null</returns>
            <param name="options">ref to <see cref="T:GirafRest.Models.DTOs.SettingDTO"/></param>
        </member>
        <member name="M:GirafRest.Controllers.UserController.IsWeekDayColorsCorrectHexFormat(GirafRest.Models.DTOs.SettingDTO)">
            <summary>
            // Takes a list of WeekDayColorDTOs and check if all hex given is in correct format
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GirafRest.Controllers.WeekController.ReadFullWeekSchedules(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:GirafRest.Controllers.WeekController.ReadWeekSchedules(System.String)" -->
        <member name="M:GirafRest.Controllers.WeekController.ReadUsersWeekSchedule(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:GirafRest.Models.DTOs.WeekDTO"/> with the specified week number and year for the user with the given id
            </summary>
            <param name="weekYear">The year of the week schedule to fetch.</param>
            <param name="weekNumber">The week number of the week schedule to fetch.</param>
            <returns><see cref="T:GirafRest.Models.DTOs.WeekDTO"/> for the requested week on success else UserNotFound or NotAuthorized</returns>
            <param name="userId">Identifier of the <see cref="T:GirafRest.Models.GirafUser"/> to request schedule for</param>
        </member>
        <member name="M:GirafRest.Controllers.WeekController.UpdateWeek(System.String,System.Int32,System.Int32,GirafRest.Models.DTOs.WeekDTO)">
            <summary>
            Updates the entire information of the week with the given year and week number.
            </summary>
            <param name="userId">id of user you want to get weekschedule for.</param>
            <param name="weekYear">year of the week you want to update</param>
            <param name="weekNumber">weeknr of week you want to update.</param>
            <param name="newWeek">A serialized Week with new information.</param>
            <returns><see cref="T:GirafRest.Models.DTOs.WeekDTO"/> for the requested week on success else MissingProperties, UserNotFound 
            or NotAuthorized</returns>
        </member>
        <member name="M:GirafRest.Controllers.WeekController.DeleteWeek(System.String,System.Int32,System.Int32)">
            <summary>
            Deletes all information for the entire week with the given year and week number.
            </summary>
            <param name="userId"></param>
            <param name="weekYear"></param>
            <param name="weekNumber"></param>
            <returns>Success Reponse else UserNotFound, NotAuthorized,
            or NoWeekScheduleFound </returns>
        </member>
        <member name="F:GirafRest.Controllers.WeekTemplateController._giraf">
            <summary>
            A reference to GirafService, that contains common functionality for all controllers.
            </summary>
        </member>
        <member name="F:GirafRest.Controllers.WeekTemplateController._roleManager">
            <summary>
            A reference to the role manager for the project.
            </summary>
        </member>
        <member name="F:GirafRest.Controllers.WeekTemplateController._authentication">
            <summary>
            reference to the authenticationservice which provides commong authentication checks
            </summary>
        </member>
        <member name="M:GirafRest.Controllers.WeekTemplateController.#ctor(GirafRest.Services.IGirafService,Microsoft.AspNetCore.Identity.RoleManager{GirafRest.Models.GirafRole},Microsoft.Extensions.Logging.ILoggerFactory,GirafRest.IAuthenticationService)">
            <summary>
            Constructor is called by the asp.net runtime.
            </summary>
            <param name="giraf">A reference to the GirafService.</param>
            <param name="roleManager">A reference to the... no, wait, just take a guess, eh?</param>
            <param name="loggerFactory">A reference to an implementation of ILoggerFactory. Used to create a logger.</param>
            <param name="authentication"></param>
        </member>
        <member name="M:GirafRest.Controllers.WeekTemplateController.GetWeekTemplates">
            <summary>
            Gets all schedule templates for the currently authenticated user.
            Available to all users.
            </summary>
            <returns>NoWeekTemplateFound if there are no templates in the user's department.
            OK otherwise.</returns>
        </member>
        <member name="M:GirafRest.Controllers.WeekTemplateController.GetWeekTemplate(System.Int64)">
            <summary>
            Gets the week template with the specified id.
            Available to all users.
            </summary>
            <param name="id">The id of the week template to fetch.</param>
            <returns>Notfound if there is no template in the authenticated user's department by that ID,
            <b>or</b> if user does not have the proper authorisation for the template.</returns>
        </member>
        <member name="M:GirafRest.Controllers.WeekTemplateController.CreateWeekTemplate(GirafRest.Models.DTOs.WeekTemplateDTO)">
            <summary>
            Creates new week template in the department of the given user. 
            Available to Supers, Departments and Guardians.
            </summary>
            <param name="templateDto">After successful execution, a new week template will be created with the same values as this DTO.</param>
            <returns>UserMustBeInDepartment if user has no associated department.
            MissingProperties if properties are missing.
            ResourceNotFound if any pictogram id is invalid.
            A DTO containing the full information on the created template otherwise.</returns>
        </member>
        <member name="M:GirafRest.Controllers.WeekTemplateController.UpdateWeekTemplate(System.Int64,GirafRest.Models.DTOs.WeekTemplateDTO)">
            <summary>
            Overwrite the information of a week template.
            Available to all Supers, and to Departments and Guardians of the same department as the template.
            </summary>
            <param name="id">Id of the template to overwrite.</param>
            <param name="newValuesDto">After successful execution, specified template will have the same values as this DTO</param>
            <returns> WeekTemplateNotFound if no template exists with the given id.
            NotAuthorized if not available to authenticated user(see summary).
            MissingProperties if properties are missing.
            ResourceNotFound if any pictogram id is invalid.
            A DTO containing the full information on the created template otherwise.</returns>
        </member>
        <member name="M:GirafRest.Controllers.WeekTemplateController.DeleteTemplate(System.Int64)">
            <summary>
            Deletes the template of the given ID.
            Available to all Supers, and to Departments and Guardians of the same department as the template.
            </summary>
            <param name="id">Id of the template that will be deleted.</param>
            <returns> WeekTemplateNotFound if no template exists with the given id.
            NotAuthorized if not available to authenticated user(see summary).
            OK otherwise. </returns>
        </member>
        <member name="T:GirafRest.Setup.DBInitializer">
            <summary>
            A class for initializing the database with some sample data.
            </summary>
        </member>
        <member name="T:GirafRest.Setup.Startup">
            <summary>
            The Startup class, that defines how the server should behave. In this class you may add services to
            the server, that serves different purposes on the server. All parameters to the methods in this class
            is delivered by the ASP.NET runtime via dependency injection.
            </summary>
        </member>
        <member name="P:GirafRest.Setup.Startup.Configuration">
            <summary>
            The configuration, contains information regarding connecting to the database
            </summary>
        </member>
        <member name="M:GirafRest.Setup.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the application.
            A service is some class instance that may be used by all classes of the application.
            </summary>
        </member>
        <member name="M:GirafRest.Setup.Startup.configureIdentity``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the GirafUser Identity, changing what is needed by it, and how it should act
            </summary>
            <param name="services">A collection of all services in the application</param>
        </member>
        <member name="M:GirafRest.Setup.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Identity.UserManager{GirafRest.Models.GirafUser},Microsoft.AspNetCore.Identity.RoleManager{GirafRest.Models.GirafRole},Microsoft.AspNetCore.Hosting.IApplicationLifetime)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
        </member>
        <member name="T:GirafRest.Data.GirafDbContext">
            <summary>
            The GirafDbContext, this is the Database Context for the Giraf database, it defines the various relations between objects in the database.
            and which objects exist.
            By convention each DbSet will create a table in the database with the given name
            </summary>
        </member>
        <member name="M:GirafRest.Data.GirafDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures entity to the needs of this project through the fluent API
            </summary>
            <param name="builder">A database model builder, that defines methods for specifying the database design.</param>
        </member>
        <member name="T:GirafRest.Models.AccessLevel">
            <summary>
            Defines access levels of <see cref="T:GirafRest.Models.Pictogram"/> in the system.
            </summary>
        </member>
        <member name="T:GirafRest.Models.Department">
            <summary>
            Departments group users and thus have a list of users. They may own resources, that are available
            to all users in the department.
            </summary>
        </member>
        <member name="M:GirafRest.Models.Department.#ctor(GirafRest.Models.DTOs.DepartmentDTO)">
            <summary>
            Creates a new department from the given department DTO.
            </summary>
            <param name="depDTO">The DTO containing all data on the new department.</param>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.ChangePasswordDTO.OldPassword">
            <summary>
            The users current password.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.ChangePasswordDTO.NewPassword">
            <summary>
            The desired password.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.LoginDTO.Username">
            <summary>
            The users username.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.LoginDTO.Password">
            <summary>
            The users password.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.RegisterDTO.Username">
            <summary>
            The users username.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.RegisterDTO.Password">
            <summary>
            The users password.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.RegisterDTO.DisplayName">
            <summary>
            The users DisplayName
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.RegisterDTO.DepartmentId">
            <summary>
            The users departmentid.
            </summary>
        </member>
        <member name="T:GirafRest.Models.DTOs.AccountDTOs.ResetPasswordDTO">
            <summary>
            This class defines the structure of the expected json when a user wishes to reset his password.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.ResetPasswordDTO.Password">
            <summary>
            The users password.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.AccountDTOs.ResetPasswordDTO.Token">
            <summary>
            Reset password token. Used when a user request a password reset.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.ActivityDTO.Order">
            <summary>
            The order that the activity will appear on in a weekschedule. If two has same order it is a choice
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.ActivityDTO.State">
            <summary>
            The current ActivityState
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.ActivityDTO.IsChoiceBoard">
            <summary>
            This is used in the WeekPlanner app by the frontend groups and should never be set from our side
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.DepartmentDTO.Id">
            <summary>
            The id of the department.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.DepartmentDTO.Name">
            <summary>
            The name of the department.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.DepartmentDTO.Members">
            <summary>
            A list of the usernames of all members of the department.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.DepartmentDTO.Resources">
            <summary>
            A list of ids of all resources owned by the department.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.DepartmentDTO.#ctor(GirafRest.Models.Department,System.Collections.Generic.IEnumerable{GirafRest.Models.DTOs.UserNameDTO})">
            <summary>
            Creates a new department data transfer object from a given department.
            </summary>
            <param name="department">The department to transfer.</param>
            <param name="roleManager">Used for finding the members' roles.</param>
            <param name="girafService">Used for finding the members' roles.</param>
        </member>
        <member name="T:GirafRest.Models.DTOs.GirafRoles">
            <summary>
            Giraf roles
            </summary>
        </member>
        <member name="T:GirafRest.Models.DTOs.GirafUserDTO">
            <summary>
            Defines the structure of GirafUsers when serializing and deserializing data. Data transfer objects (DTOs) 
            were introduced in the project due to problems with circular references in the model classes.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.GirafUserDTO.Role">
            <summary>
            List of the roles the current user is defined as in the system.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.GirafUserDTO.RoleName">
            <summary>
            List of the roles the current user is defined as in the system, as strings
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.GirafUserDTO.Id">
            <summary>
            The Id of the user.
            </summary>c
        </member>
        <member name="P:GirafRest.Models.DTOs.GirafUserDTO.Username">
            <summary>
            The username of the user.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.GirafUserDTO.ScreenName">
            <summary>
            The display name of the user.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.GirafUserDTO.Department">
            <summary>
            The key of the user's department.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.GirafUserDTO.#ctor">
            <summary>
            DO NOT DELETE THIS! NEWTONSOFT REQUIRES AN EMPTY CONSTRUCTOR!
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.GirafUserDTO.#ctor(GirafRest.Models.GirafUser,GirafRest.Models.DTOs.GirafRoles)">
            <summary>
            Initializes a new instance of the <see cref="T:GirafRest.Models.DTOs.GirafUserDTO"/> class.
            </summary>
            <param name="user">User.</param>
            <param name="userRole">User role.</param>
            <param name="addGuardianRelation">If set to <c>true</c> add guardian relation.</param>
        </member>
        <member name="T:GirafRest.Models.DTOs.ImageDTO">
            <summary>
            Defines the structure of image when serializing and deserializing data. Data transfer objects (DTOs) 
            were introduced in the project due to problems with circular references in the model classes.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.ImageDTO.#ctor(System.Byte[])">
            <summary>
            Creates a new image data transfer object from a given base64 string.
            </summary>
            <param name="image">An array of bytes containing the pictogram's image as a base64 encoded string.</param>
        </member>
        <member name="M:GirafRest.Models.DTOs.ImageDTO.#ctor">
            <summary>
            DO NOT DELETE THIS! NEWTONSOFT REQUIRES AN EMPTY CONSTRUCTOR!
            </summary>
        </member>
        <member name="T:GirafRest.Models.DTOs.PictogramDTO">
            <summary>
            Defines the structure of Pictogram when serializing and deserializing data. Data transfer objects (DTOs) 
            were introduced in the project due to problems with circular references in the model classes.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.PictogramDTO.LastEdit">
            <summary>
            The last time the pictogram was edited.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.PictogramDTO.Title">
            <summary>
            The title of the pictogram.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.PictogramDTO.AccessLevel">
            <summary>
            The accesslevel of the pictogram.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.PictogramDTO.#ctor">
            <summary>
            DO NOT DELETE THIS! NEWTONSOFT REQUIRES AN EMPTY CONSTRUCTOR!
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.ResourceIdDTO.Id">
            <summary>
            The Id of the Resource.
            </summary>
        </member>
        <member name="T:GirafRest.Models.DTOs.SettingDTO">
            <summary>
            A Data Transfer Object for the user settings used by the launcher
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.Orientation">
            <summary>
            Preferred orientation of device/screen
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.CompleteMark">
            <summary>
            Preferred appearence of checked resources
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.CancelMark">
            <summary>
            Preferred appearence of cancelled resources
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.DefaultTimer">
            <summary>
            Preferred appearence of timer
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.TimerSeconds">
            <summary>
            Number of seconds for timer
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.ActivitiesCount">
            <summary>
            Number of activities
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.Theme">
            <summary>
            The preferred theme
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.NrOfDaysToDisplay">
            <summary>
            defines the number of days to display for a user in a weekschedule
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.SettingDTO.GreyScale">
            <summary>
            Flag for indicating whether or not greyscale is enabled
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.SettingDTO.#ctor(GirafRest.Models.Setting)">
            <summary>
            Constructor to create a DTO based on the actual object
            </summary>
            <param name="options">The launcher options in need of transfer</param>
        </member>
        <member name="P:GirafRest.Models.DTOs.TimerDTO.StartTime">
            <summary>
            Start time of the timers
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.TimerDTO.Progress">
            <summary>
            The progress of the timer in miliseconds.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.TimerDTO.FullLength">
            <summary>
            The full length of the timer.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.TimerDTO.Paused">
            <summary>
            Boolean for setting whether the timer is paused.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekBaseDTO.Thumbnail">
            <summary>
            The weeks thumbnail.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekBaseDTO.Name">
            <summary>
            A Name describing the week.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekBaseDTO.Days">
            <summary>
            A list of the days in the week schedule.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.WeekBaseDTO.#ctor(GirafRest.Models.WeekBase)">
            <summary>
            Creates a new data transfer object for a given week.
            </summary>
            <param name="week">The week to create a DTO for.</param>
        </member>
        <member name="M:GirafRest.Models.DTOs.WeekBaseDTO.#ctor">
            <summary>
            DO NOT DELETE THIS! NEWTONSOFT REQUIRES AN EMPTY CONSTRUCTOR.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.WeekBaseDTO.ValidateModel">
            <summary>
             Validates the WeekDTO for e.g. amount of days
            </summary>
            <returns>InvalidAmountOfWeekdays if amount of days is not in the range 1 to 7.
            TwoDaysCannotHaveSameDayProperty if we e.g. have two Thursdays in a single week.</returns>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekdayDTO.Day">
            <summary>
            An enum defining which day of the week this Weekday represents.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekdayDTO.Activities">
            <summary>
            A list of all the activities of the week.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.WeekdayDTO.#ctor(GirafRest.Models.Weekday)">
            <summary>
            Creates a new data transfer object for the given week.
            </summary>
            <param name="weekday">The weekday to create a DTO for.</param>
        </member>
        <member name="M:GirafRest.Models.DTOs.WeekdayDTO.#ctor">
            <summary>
            Empty constructor required for test framework.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekDTO.WeekYear">
            <summary>
            The year of the week.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekDTO.WeekNumber">
            <summary>
            The number of the week, 0 - 52 (53).
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekPictogramDTO.LastEdit">
            <summary>
            The last time the pictogram was edited.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekPictogramDTO.Title">
            <summary>
            The title of the pictogram.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekPictogramDTO.AccessLevel">
            <summary>
            The accesslevel of the pictogram.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DTOs.WeekPictogramDTO.#ctor">
            <summary>
            DO NOT DELETE THIS! NEWTONSOFT REQUIRES AN EMPTY CONSTRUCTOR!
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekTemplateDTO.DepartmentKey">
            <summary>
            Key of the department the template belongs to
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekTemplateDTO.Id">
            <summary>
            Id of the corresponding <see cref="T:GirafRest.Models.WeekTemplate"/>
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekTemplateNameDTO.Name">
            <summary>
            Name of the <see cref="T:GirafRest.Models.WeekTemplate"/>
            </summary>
        </member>
        <member name="P:GirafRest.Models.DTOs.WeekTemplateNameDTO.TemplateId">
            <summary>
            Id of the <see cref="T:GirafRest.Models.WeekTemplate"/>
            </summary>
        </member>
        <member name="T:GirafRest.Models.GirafRole">
            <summary>
            All the roles available in the system
            </summary>
        </member>
        <member name="T:GirafRest.Models.GirafUser">
            <summary>
            GirafUser defines all relavant data for the user's of Giraf.
            </summary>
        </member>
        <member name="P:GirafRest.Models.GirafUser.IsDepartment">
            <summary>
            Whether or not the current user is a DepartmentUser
            </summary>
        </member>
        <member name="P:GirafRest.Models.GirafUser.Guardians">
            <summary>
            List of guardians in a relationship with the user. Is empty if the user is a guardian.
            </summary>
        </member>
        <member name="P:GirafRest.Models.GirafUser.Citizens">
            <summary>
            List of citizens in a relationship with the user. Is empty if the user is a citizen.
            </summary>
        </member>
        <member name="T:GirafRest.Models.Activity">
            <summary>
            Defines a many-to-many relationship between <see cref="T:GirafRest.Models.Weekday"/> and <see cref="P:GirafRest.Models.Activity.Pictogram"/> (called resource).
            </summary>
        </member>
        <member name="P:GirafRest.Models.Activity.Key">
            <summary>
            The key of the relationship entity.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Activity.OtherKey">
            <summary>
            The key of the weekday to which the resource is attached.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Activity.Other">
            <summary>
            A reference to the actual weekday.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Activity.PictogramKey">
            <summary>
            The key of the involved resource.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Activity.Pictogram">
            <summary>
            A reference to the actual resource.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GirafRest.Models.Activity.Timer" -->
        <member name="M:GirafRest.Models.Activity.#ctor(GirafRest.Models.Weekday,GirafRest.Models.Pictogram,System.Int32,GirafRest.Models.ActivityState)">
            <summary>
            Creates a new many-to-many relationship between a weekday and a resource.
            </summary>
            <param name="weekday">The involved weekday.</param>
            <param name="resource">The involved resource.</param>
        </member>
        <member name="M:GirafRest.Models.Activity.#ctor">
            <summary>
            DO NOT DELETE THIS.
            </summary>
        </member>
        <member name="T:GirafRest.Models.DepartmentResource">
            <summary>
            Defines a many-to-many relationship between <see cref="T:GirafRest.Models.Department"/> and <see cref="P:GirafRest.Models.DepartmentResource.Pictogram"/> (ressource)
            </summary>
        </member>
        <member name="P:GirafRest.Models.DepartmentResource.Key">
            <summary>
            The key of the relationship entity.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DepartmentResource.OtherKey">
            <summary>
            The key of the involved department.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DepartmentResource.Other">
            <summary>
            A reference to the actual department.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DepartmentResource.PictogramKey">
            <summary>
            The key of the involved resource.
            </summary>
        </member>
        <member name="P:GirafRest.Models.DepartmentResource.Pictogram">
            <summary>
            A reference to the actual resource.
            </summary>
        </member>
        <member name="M:GirafRest.Models.DepartmentResource.#ctor(GirafRest.Models.Department,GirafRest.Models.Pictogram)">
            <summary>
            Creates a new many-to-many relationship between a department and a resource.
            </summary>
            <param name="dep">The involved department.</param>
            <param name="resource">The involved resource.</param>
        </member>
        <member name="M:GirafRest.Models.DepartmentResource.#ctor">
            <summary>
            DO NOT DELETE THIS!
            </summary>
        </member>
        <member name="T:GirafRest.Models.UserResource">
            <summary>
            Defines a many-to-many relationship between <see cref="T:GirafRest.Models.GirafUser"/> and <see cref="P:GirafRest.Models.UserResource.Pictogram"/> (ressource)
            </summary>
        </member>
        <member name="P:GirafRest.Models.UserResource.Key">
            <summary>
            The key of the relationship entity.
            </summary>
        </member>
        <member name="P:GirafRest.Models.UserResource.OtherKey">
            <summary>
            The key of the user who is involved in the relationship.
            </summary>
        </member>
        <member name="P:GirafRest.Models.UserResource.Other">
            <summary>
            A reference to the actual user.
            </summary>
        </member>
        <member name="P:GirafRest.Models.UserResource.PictogramKey">
            <summary>
            The key of the involved resource.
            </summary>
        </member>
        <member name="M:GirafRest.Models.UserResource.#ctor(GirafRest.Models.GirafUser,GirafRest.Models.Pictogram)">
            <summary>
            Creates a new many-to-many relationship between a user and a resource.
            </summary>
            <param name="user">The involved user.</param>
            <param name="resource">The involved resource.</param>
        </member>
        <member name="M:GirafRest.Models.UserResource.#ctor">
            <summary>
            DO NOT DELETE THIS.
            </summary>
        </member>
        <member name="T:GirafRest.Models.Pictogram">
            <summary>
            A pictogram is an image with an associated title. They are used by Guardians and Citizens and so on to 
            communicate visually.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Pictogram.Sound">
            <summary>
            Currently not used, but old applications needs this
            </summary>
        </member>
        <member name="M:GirafRest.Models.Pictogram.#ctor">
            <summary>
            Empty constructor is required by Newtonsoft.
            </summary>
        </member>
        <member name="M:GirafRest.Models.Pictogram.Merge(GirafRest.Models.DTOs.PictogramDTO)">
            <summary>
            Overrides the information of this Pictogram with new information found in the given DTO.
            </summary>
            <param name="other">The new information.</param>
        </member>
        <member name="T:GirafRest.Models.Setting">
            <summary>
            The LauncherOptions, which is the various settings the users can add to customize the Launcher App.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.CompleteMark">
            <summary>
            Preferred appearence of checked resources
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.CancelMark">
            <summary>
            Preferred appearence of cancelled appearance    
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.DefaultTimer">
            <summary>
            Preferred appearence of timer
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.TimerSeconds">
            <summary>
            Number of seconds for timer
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.ActivitiesCount">
            <summary>
            Number of activities
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.Theme">
            <summary>
            The preferred theme
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.NrOfDaysToDisplay">
            <summary>
            defines the number of days to display for a user in a weekschedule
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.GreyScale">
            <summary>
            Flag for indicating whether or not greyscale is enabled
            </summary>
        </member>
        <member name="P:GirafRest.Models.Setting.WeekDayColors">
            <summary>
            Each day in a weekschedule has a hexcolor associated
            </summary>
            <value>The week day colors.</value>
        </member>
        <member name="M:GirafRest.Models.Setting.UpdateFrom(GirafRest.Models.DTOs.SettingDTO)">
            <summary>
            Updates all settings based on a DTO
            </summary>
            <param name="newOptions">The DTO containing new settings</param>
        </member>
        <member name="M:GirafRest.Models.Setting.#ctor">
            <summary>
            DO NOT DELETE
            </summary>
        </member>
        <member name="P:GirafRest.Models.Timer.Key">
            <summary>
            The key of the relationship entity.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Timer.StartTime">
            <summary>
            Start time of the timer
            </summary>
        </member>
        <member name="P:GirafRest.Models.Timer.Progress">
            <summary>
            The progress of the timer in miliseconds.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Timer.FullLength">
            <summary>
            The full length of the timer.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Timer.Paused">
            <summary>
            Boolean for setting whether the timer is paused.
            </summary>
        </member>
        <member name="T:GirafRest.Models.Week">
            <summary>
            A week defines the schedule of some citizen in the course of the week.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Week.WeekYear">
            <summary>
            The year of the week.
            </summary>
        </member>
        <member name="P:GirafRest.Models.Week.WeekNumber">
            <summary>
            The number of the week, 0 - 52 (53).
            </summary>
        </member>
        <member name="M:GirafRest.Models.Week.#ctor">
            <summary>
            DO NOT DELETE
            </summary>
        </member>
        <member name="M:GirafRest.Models.WeekBase.UpdateDay(GirafRest.Models.Weekday)">
            <summary>
            Updates the given weekday of the Week with the new information found in 'day'.
            </summary>
            <param name="day">A day instance to update the week with - the old one is completely overridden.</param>
        </member>
        <member name="M:GirafRest.Models.WeekBase.#ctor">
            <summary>
            DO NOT DELETE
            </summary>
        </member>
        <member name="M:GirafRest.Models.Weekday.#ctor">
            <summary>
            DO NOT DELETE
            </summary>
        </member>
        <member name="P:GirafRest.Models.WeekTemplate.Department">
            <summary>
            A reference to the department using this template.
            </summary>
        </member>
        <member name="M:GirafRest.Models.WeekTemplate.#ctor">
            <summary>
            DO NOT DELETE
            </summary>
        </member>
        <member name="M:GirafRest.Models.WeekTemplate.#ctor(GirafRest.Models.Department)">
            <summary>
            A constructor for week setting only the thumbnail.
            </summary>
        </member>
        <member name="P:GirafRest.DepartmentNameDTO.ID">
            <summary>
            The id of the department.
            </summary>
        </member>
        <member name="P:GirafRest.DepartmentNameDTO.Name">
            <summary>
            The name of the department.
            </summary>
        </member>
        <member name="P:GirafRest.WeekDayColorDTO.HexColor">
            <summary>
            Color as a Hex string
            </summary>
        </member>
        <member name="P:GirafRest.WeekDayColorDTO.Day">
            <summary>
            Day for which the color belongs
            </summary>
            <value>The day.</value>
        </member>
        <member name="P:GirafRest.WeekNameDTO.Name">
            <summary>
            A Name describing the week.
            </summary>
        </member>
        <member name="P:GirafRest.WeekNameDTO.WeekYear">
            <summary>
            The year of the week.
            </summary>
        </member>
        <member name="P:GirafRest.WeekNameDTO.WeekNumber">
            <summary>
            The number of the week, 0 - 52 (53).
            </summary>
        </member>
        <member name="T:GirafRest.GuardianRelation">
            <summary>
            Pivot table for many-many between <see cref="P:GirafRest.GuardianRelation.Guardian"/> and <see cref="P:GirafRest.GuardianRelation.Citizen"/>/>
            </summary>
        </member>
        <member name="P:GirafRest.GuardianRelation.Id">
            <summary>
            The key of the relationship entity.
            </summary>
        </member>
        <member name="P:GirafRest.GuardianRelation.CitizenId">
            <summary>
            The key of the weekday to which the resource is attached.
            </summary>
        </member>
        <member name="P:GirafRest.GuardianRelation.GuardianId">
            <summary>
            The key of the involved resource.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GirafRest.GuardianRelation.Citizen" -->
        <member name="T:GirafRest.WeekDayColor">
            <summary>
            The entity for enabling a day to have a specific Color
            </summary>
        </member>
        <member name="M:GirafRest.WeekDayColor.#ctor">
            <summary>
            DO NOT DELETE
            </summary>
        </member>
        <member name="M:GirafRest.Program.BuildWebHost(System.String[])">
            <summary>
            Builds the host environment from a specified config class.
            <see cref="T:GirafRest.Setup.Startup"/> sets the general environment (authentication, logging i.e)
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Hosting.IWebHost"/> host fit for running the server.</returns>
        </member>
        <member name="T:GirafRest.ProgramArgumentParser">
            <summary>
            A class that may be used to pass program arguments
            </summary>
        </member>
        <member name="F:GirafRest.ProgramArgumentParser._options">
            <summary>
            A list of arguments that are allowed by the application.
            </summary>
        </member>
        <member name="F:GirafRest.ProgramArgumentParser._helpMessage">
            <summary>
            A short help message telling the user how to see all program arguments.
            </summary>
        </member>
        <member name="T:GirafRest.ProgramArgumentParser.ProgramArgumentHandler">
            <summary>
            A delegate that defines the structure of program argument handler methods.
            </summary>
            <param name="parameter">A series of strings for the parameters of each argument.</param>
        </member>
        <member name="F:GirafRest.ProgramArgumentParser.programArgumentDictionary">
            <summary>
            A dictionary for storing each configuration method under a given name.
            </summary>
        </member>
        <member name="M:GirafRest.ProgramArgumentParser.#ctor">
            <summary>
            Constructs a new ProgramArgumentParser, that can parse program arguments. 
            It also adds all allowed arguments to the dictionary.
            </summary>
        </member>
        <member name="M:GirafRest.ProgramArgumentParser.CheckProgramArguments(System.String[])">
            <summary>
            Run over the array of program arguments, apply their options and check that they are valid.
            </summary>
            <param name="args">An array of program arguments.</param>
            <returns>True if all the arguments were valid and false otherwise.</returns>
        </member>
        <member name="M:GirafRest.ProgramArgumentParser.programArgumentPort(System.String[])">
            <summary>
            Attempts to configure which port to host the server on.
            </summary>
            <param name="portString">A string representation of an integer, denoting the desired port of the server.</param>
        </member>
        <member name="M:GirafRest.ProgramArgumentParser.programArgumentLogfile(System.String[])">
            <summary>
            Specifies that the server should utilize file-logging to the given file.
            </summary>
            <param name="filename">The name of the file to log to. All files will be placed in wwwroot/Logs.</param>
        </member>
        <member name="T:GirafRest.ProgramOptions">
            <summary>
            A static class for storing all options for the rest api.
            </summary>
        </member>
        <member name="F:GirafRest.ProgramOptions.GenerateSampleData">
            <summary>
            An option that indicates whether the user has specified that sample data should be added to the database on start up.
            </summary>
        </member>
        <member name="F:GirafRest.ProgramOptions.Port">
            <summary>
            A field for storing the port on which to host the server.
            </summary>
        </member>
        <member name="F:GirafRest.ProgramOptions.LogToFile">
            <summary>
            Indicates if the server should utilize file logging.
            </summary>
        </member>
        <member name="F:GirafRest.ProgramOptions.LogFilepath">
            <summary>
            The file path of the file to log to.
            </summary>
        </member>
        <member name="F:GirafRest.ProgramOptions.LogDirectory">
            <summary>
            The directory where log-files should be placed.
            </summary>
        </member>
        <member name="T:GirafRest.Services.GirafAuthenticationService">
            <summary>
            A service used by the EmailService. Contains all the necessary information for the EmailService.
            </summary>
        </member>
        <member name="M:GirafRest.Services.GirafAuthenticationService.HasEditOrReadUserAccess(GirafRest.Models.GirafUser,GirafRest.Models.GirafUser)">
            <summary>
             Given the authenticated user and the id on another user this methods check if the authenticated user
            has the access to edit the provided user's userinformation.
            Does not currently support parents.
            </summary>
        </member>
        <member name="M:GirafRest.Services.GirafAuthenticationService.HasRegisterUserAccess(GirafRest.Models.GirafUser,GirafRest.Models.DTOs.GirafRoles,System.Int64)">
            <summary>
            Checks that a user gots the rights to register a specific role to a specific department
            Citizen can never register, department and guardian can only register guardians and citizens in same dep
            Super user can register all roles
            </summary>
        </member>
        <member name="M:GirafRest.Services.GirafAuthenticationService.HasTemplateAccess(GirafRest.Models.GirafUser)">
            <summary>
            Check that a user has access to read the template of a given user
            </summary>
        </member>
        <member name="M:GirafRest.Services.GirafAuthenticationService.HasReadDepartmentAccess(GirafRest.Models.GirafUser,System.Nullable{System.Int64})">
            <summary>
            Method for checking whether the authenticated user is allowed to view information related to given department.
            </summary>
        </member>
        <member name="T:GirafRest.Services.GirafService">
            <summary>
            The GirafService class implements the <see cref="T:GirafRest.Services.IGirafService"/> interface and thus implements common
            functionality that is needed by most controllers.
            </summary>
        </member>
        <member name="P:GirafRest.Services.GirafService._context">
            <summary>
            A reference to the database context - used to access the database and query for data. Handled by asp.net's dependency injection.
            </summary>
        </member>
        <member name="P:GirafRest.Services.GirafService._userManager">
            <summary>
            Asp.net's user manager. Can be used to fetch user data from the request's cookie. Handled by asp.net's dependency injection.
            </summary>
        </member>
        <member name="P:GirafRest.Services.GirafService._logger">
            <summary>
            A data-logger used to write messages to the console. Handled by asp.net's dependency injection.
            </summary>
        </member>
        <member name="M:GirafRest.Services.GirafService.#ctor(GirafRest.Data.GirafDbContext,Microsoft.AspNetCore.Identity.UserManager{GirafRest.Models.GirafUser})">
            <summary>
            The most general constructor for GirafService. This constructor is used by both the other constructors and the unit tests.
            </summary>
            <param name="context">Reference to the database context.</param>
            <param name="userManager">Reference to asp.net's user-manager.</param>
        </member>
        <member name="M:GirafRest.Services.GirafService.LoadUserWithResources(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Method for loading user from context and eager loading <b>resources</b> fields
            </summary>
            <param name="principal">The security claim - i.e. the information about the currently authenticated user.</param>
            <returns>A <see cref="T:GirafRest.Models.GirafUser"/> with <b>all</b> related data.</returns>
        </member>
        <member name="M:GirafRest.Services.GirafService.LoadUserWithDepartment(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Method for loading user from context and eager loading <b>resources</b> fields
            </summary>
            <param name="principal">The security claim - i.e. the information about the currently authenticated user.</param>
            <returns>A <see cref="T:GirafRest.Models.GirafUser"/> with <b>all</b> related data.</returns>
        </member>
        <member name="M:GirafRest.Services.GirafService.LoadUserWithWeekSchedules(System.String)">
            <summary>
            Method for loading user from context and eager loading fields requied to read their <b>week schedules</b>
            </summary>
            <param name="principal">The security claim - i.e. the information about the currently authenticated user.</param>
            <returns>A <see cref="T:GirafRest.Models.GirafUser"/> with <b>all</b> related data.</returns>
        </member>
        <member name="M:GirafRest.Services.GirafService.LoadBasicUserDataAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Method for loading user from context, but including no fields. No reference types will be available.
            </summary>
            <param name="principal">The security claim - i.e. the information about the currently authenticated user.</param>
            <returns>A <see cref="T:GirafRest.Models.GirafUser"/> without any related data.</returns>
        </member>
        <member name="M:GirafRest.Services.GirafService.ReadRequestImage(System.IO.Stream)">
            <summary>
            Reads an image from the current request's body and return it as a byte array.
            </summary>
            <param name="bodyStream">A byte-stream from the body of the request.</param>
            <returns>The image found in the request represented as a byte array.</returns>
        </member>
        <member name="M:GirafRest.Services.GirafService.CheckPrivateOwnership(GirafRest.Models.Pictogram,GirafRest.Models.GirafUser)">
            <summary>
            Checks if the user owns the given <paramref name="pictogram"/>.
            </summary>
            <param name="pictogram">The pictogram to check the ownership for.</param>
            <param name="user"></param>
            <returns>True if the user is authorized to see the resource and false if not.</returns>
        </member>
        <member name="M:GirafRest.Services.GirafService.CheckProtectedOwnership(GirafRest.Models.Pictogram,GirafRest.Models.GirafUser)">
            <summary>
            Checks if the current user's department owns the given resource.
            </summary>
            <param name="resource">The resource to check ownership for.</param>
            <param name="user"></param>
            <returns>True if the user's department owns the pictogram, false if not.</returns>
        </member>
        <member name="T:GirafRest.Services.IGirafService">
            <summary>
            The IGirafService interfaces defines all methods that are commonly used by the controllers.
            </summary>
        </member>
        <member name="P:GirafRest.Services.IGirafService._logger">
            <summary>
            A reference to a logger used to log information from controllers.
            </summary>
        </member>
        <member name="P:GirafRest.Services.IGirafService._context">
            <summary>
            A reference to the database context of the application. This context may be used to query for data.
            </summary>
        </member>
        <member name="P:GirafRest.Services.IGirafService._userManager">
            <summary>
            A reference to the user manager, used to fetch users.
            </summary>
        </member>
        <member name="M:GirafRest.Services.IGirafService.LoadBasicUserDataAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Loads only the user with the given username, excluding any associated data.
            </summary>
            <param name="principal">A reference to HttpContext.User</param>
            <returns>The loaded user.</returns>
        </member>
        <member name="M:GirafRest.Services.IGirafService.LoadUserWithWeekSchedules(System.String)">
            <summary>
            Loads the user with week schedules.
            </summary>
            <returns>The user with week schedules.</returns>
            <param name="id">Identifier of <see cref="T:GirafRest.Models.GirafUser"/></param>
        </member>
        <member name="M:GirafRest.Services.IGirafService.ReadRequestImage(System.IO.Stream)">
            <summary>
            Loads the image of the request body.
            </summary>
            <param name="bodyStream">A stream from which the request body may be read.</param>
            <returns>The image as a byte array.</returns>
        </member>
        <member name="M:GirafRest.Services.IGirafService.LoadUserWithResources(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Loads the user with resources.
            </summary>
            <returns>The user with resources.</returns>
            <param name="principal">The security claim - i.e. the information about the currently authenticated user.</param>
        </member>
        <member name="M:GirafRest.Services.IGirafService.CheckPrivateOwnership(GirafRest.Models.Pictogram,GirafRest.Models.GirafUser)">
            <summary>
            Checks if the current user owns the given resource.
            </summary>
            <param name="resource">The resource to check ownership for.</param>
            <param name="user">A reference to the user in question.</param>
            <returns>True if the user owns the resource, false if not.</returns>
        </member>
        <member name="M:GirafRest.Services.IGirafService.CheckProtectedOwnership(GirafRest.Models.Pictogram,GirafRest.Models.GirafUser)">
            <summary>
            Checks if the current user's department owns the given resource.
            </summary>
            <param name="resource">The resource to check ownership for.</param>
            <param name="user">A reference to the user in question.</param>
            <returns>True if the user's department owns the resource, false if not.</returns>
        </member>
        <member name="M:GirafRest.Services.IGirafService.LoadUserWithDepartment(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Loads the user with department.
            </summary>
            <returns>The user with department.</returns>
            <param name="principal">Principal.</param>
        </member>
        <member name="T:GirafRest.IAuthenticationService">
            <summary>
            Contains methods for authentication checks
            </summary>
        </member>
        <member name="M:GirafRest.IAuthenticationService.HasEditOrReadUserAccess(GirafRest.Models.GirafUser,GirafRest.Models.GirafUser)">
            <summary>
            Checks if a user has access to edit information for another user i.ie that the authentication user
            and the userToEdit are the same or that the authorised user is guardian for the user
            </summary>
            <returns>The user access.</returns>
            <param name="authUser">Auth user.</param>
            <param name="userToEdit">User to edit.</param>
        </member>
        <member name="M:GirafRest.IAuthenticationService.HasRegisterUserAccess(GirafRest.Models.GirafUser,GirafRest.Models.DTOs.GirafRoles,System.Int64)">
            <summary>
            Method for checking if a specific user has the rights to add a specific role to a given department
            </summary>
            <returns>The register rights.</returns>
            <param name="authUser">Auth user.</param>
            <param name="roleToAdd">Role to add.</param>
            <param name="departmentKey">Department key.</param>
        </member>
        <member name="M:GirafRest.IAuthenticationService.HasTemplateAccess(GirafRest.Models.GirafUser)">
            <summary>
            Method for checking wheteher the authenticated user is allowed to edit and view templates in general. 
            </summary>
            <param name="authUser">The user in question</param>
        </member>
        <member name="M:GirafRest.IAuthenticationService.HasTemplateAccess(GirafRest.Models.GirafUser,System.Nullable{System.Int64})">
            <summary>
            Method for checking wheteher the authenticated user is allowed to edit and view templates in the given department. 
            </summary>
            <param name="authUser">The user in question</param>
            <param name="departmentKey">Department of the template in question</param>
        </member>
        <member name="M:GirafRest.IAuthenticationService.HasReadDepartmentAccess(GirafRest.Models.GirafUser,System.Nullable{System.Int64})">
            <summary>
            Method for checking whether the authenticated user is allowed to view information related to given department.
            </summary>
            <param name="authUser">The user in question</param>
            <param name="departmentKey">Department in question</param>
            <returns></returns>
        </member>
        <member name="M:GirafRest.IAuthenticationService.HasEditDepartmentAccess(GirafRest.Models.GirafUser,System.Nullable{System.Int64})">
            <summary>
            Method for checking whether the authenticated user is allowed to view information related to given department.
            </summary>
            <param name="authUser">The user in question</param>
            <param name="departmentKey">Department in question</param>
            <returns></returns>
        </member>
        <member name="T:GirafRest.Extensions.GirafExtensions">
            <summary>
            The class for extension-methods for Giraf REST-api.
            </summary>
        </member>
        <member name="M:GirafRest.Extensions.GirafExtensions.AddMySql(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationRoot)">
            <summary>
            An extension-method for configuring the application to use a MySQL database.
            </summary>
            <param name="services">A reference to the services of the application.</param>
            <param name="Configuration">Contains the ConnectionString</param>
        </member>
        <member name="M:GirafRest.Extensions.GirafExtensions.EnsureRoleSetup(Microsoft.AspNetCore.Identity.RoleManager{GirafRest.Models.GirafRole})">
            <summary>
            An extension-method for setting up roles for use when authorizing users to methods.
            </summary>
            <param name="roleManager">A reference to the role manager for the application.</param>
        </member>
        <member name="M:GirafRest.Extensions.GirafExtensions.findUserRole(Microsoft.AspNetCore.Identity.RoleManager{GirafRest.Models.GirafRole},Microsoft.AspNetCore.Identity.UserManager{GirafRest.Models.GirafUser},GirafRest.Models.GirafUser)">
            <summary>
            Creates a list of roles a given user is part of
            </summary>
            <param name="roleManager">Reference to the roleManager</param>
            <param name="userManager">Reference to the userManager</param>
            <param name="user">The user in question</param>
            <returns>
            Instance of GirafRole enum
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GirafRest.Extensions.GirafExtensions.RemovePasswordRequirements(Microsoft.AspNetCore.Identity.IdentityOptions)" -->
        <member name="M:GirafRest.Extensions.GirafExtensions.ConfigureLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures logging for the server. Depending on the program arguments the server will either log
            solely to the console or both the console and a log-file (that may be found on host/logs/log-yyyyMMdd.txt).
            </summary>
            <param name="app">A reference to the application builder, that is used to define the behaviour of the server.</param>
            <param name="loggerFactory">A reference to the loggerFactory that is used to define the behaviour of the loggers.</param>
        </member>
        <member name="M:GirafRest.Shared.SharedMethods.SetWeekFromDTO(GirafRest.Models.DTOs.WeekBaseDTO,GirafRest.Models.WeekBase,GirafRest.Services.IGirafService)">
            <summary>
            From the given DTO, set the name, thumbnail and days of the given week object.
            </summary>
            <param name="weekDTO">The DTO from which values are read.</param>
            <param name="week">The week object to which values are written.</param>
            <param name="_giraf">An instance of the GirafService from which the database will be accessed when reading the DTO.</param>
            <returns>MissingProperties if thumbnail is missing.
            ResourceNotFound if any pictogram id is invalid.
            null otherwise.</returns>
        </member>
        <member name="M:GirafRest.Shared.SharedMethods.AddPictogramsToWeekday(GirafRest.Models.Weekday,GirafRest.Models.DTOs.WeekdayDTO,GirafRest.Services.IGirafService)">
            <summary>
            Take pictograms and choices from DTO and add them to weekday object.
            </summary>
            <returns>True if all pictograms and choices were found and added, and false otherwise.</returns>
            <param name="to">Pictograms and choices will be added to this object.</param>
            <param name="from">Pictograms and choices will be read from this object.</param>
        </member>
    </members>
</doc>
